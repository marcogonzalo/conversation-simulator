# =============================================================================
# DOCKER ENVIRONMENT CONFIGURATION (Example)
# =============================================================================
# This file serves as a template for docker.env
# Copy this file to docker.env and configure according to your needs
#
# Purpose: Environment-specific settings for Docker containers
# Note: Application settings (API keys, models, audio) go in root .env file
# =============================================================================

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# Configure the database connection for the Docker environment
# The DATABASE_URL is the recommended way to configure the database

# --- OPTION 1: DOCKER POSTGRESQL (Default/Recommended) ---
# Uses the postgres service defined in docker-compose.yml
# Format: postgresql://username:password@hostname:port/database
DATABASE_URL=postgresql://postgres:postgres@postgres:5432/conversation_simulator

# --- OPTION 2: EXTERNAL POSTGRESQL ---
# Connect to a PostgreSQL database outside Docker
# Example: DATABASE_URL=postgresql://user:password@host.docker.internal:5432/dbname
# Note: Use 'host.docker.internal' to connect to host machine from Docker

# --- OPTION 3: SUPABASE ---
# Connect to Supabase PostgreSQL from Docker
# Format: postgresql://postgres:password@db.projectref.supabase.co:5432/postgres
# Example: DATABASE_URL=postgresql://postgres:your-password@db.abcdefghij.supabase.co:5432/postgres
# Note: You'll also need SUPABASE_URL and SUPABASE_ANON_KEY in root .env

# --- OPTION 4: SQLITE (Not recommended for Docker) ---
# SQLite for testing/simple cases
# Example: DATABASE_URL=sqlite:///data/conversation_simulator.db
# Or: DATABASE_PATH=data/conversation_simulator.db

# =============================================================================
# DATABASE PROVIDERS - Connection String Examples
# =============================================================================
# Supabase:
#   postgresql://postgres:[YOUR-PASSWORD]@db.[PROJECT-REF].supabase.co:5432/postgres
#
# AWS RDS:
#   postgresql://username:password@my-db.123456.us-east-1.rds.amazonaws.com:5432/mydb
#
# DigitalOcean Managed Database:
#   postgresql://doadmin:password@db-postgresql-nyc3-12345.ondigitalocean.com:25060/defaultdb?sslmode=require
#
# Railway:
#   postgresql://postgres:password@containers-us-west-123.railway.app:5432/railway
#
# Render:
#   postgresql://username:password@dpg-abc123.oregon-postgres.render.com:5432/mydb
#
# Heroku Postgres:
#   postgres://username:password@ec2-123-45-67-89.compute-1.amazonaws.com:5432/database
#
# Local Docker Compose:
#   postgresql://postgres:postgres@postgres:5432/conversation_simulator
#
# SQLite (file-based):
#   sqlite:///data/conversation_simulator.db

# =============================================================================
# ENVIRONMENT
# =============================================================================
# Defines the environment mode
# Values: development, production, test
ENVIRONMENT=development

# =============================================================================
# DEVELOPMENT SETTINGS
# =============================================================================

# DEBUG MODE
# Enable debug mode for detailed error messages and logging
# Values: true, false
# Default: true (for development)
DEBUG=true

# LOG LEVEL
# Control the verbosity of application logs
# Values: debug, info, warning, error, critical
# Default: debug (for development), info (for production)
LOG_LEVEL=debug

# DATABASE ECHO
# Log all SQL queries to console (useful for debugging)
# Values: true, false
# Default: true (for development), false (for production)
# Warning: Can be very verbose, disable in production
DATABASE_ECHO=true

# =============================================================================
# ADVANCED SETTINGS (Optional)
# =============================================================================

# Note: DATABASE_URL is the recommended and preferred way to configure database
# Individual POSTGRES_* variables are NOT needed when using DATABASE_URL

# Connection pool settings (advanced)
# These apply regardless of how you connect to the database
# POSTGRES_POOL_SIZE=5
# POSTGRES_MAX_OVERFLOW=10
# POSTGRES_POOL_TIMEOUT=30

# SSL/TLS settings (can be added to DATABASE_URL query string)
# Example: DATABASE_URL=postgresql://user:pass@host:5432/db?sslmode=require
# POSTGRES_SSL_MODE=require
# POSTGRES_SSL_CERT=/path/to/cert.pem

# =============================================================================
# NOTES & BEST PRACTICES
# =============================================================================
# 1. Copy this file to docker.env and configure your values
# 2. Never commit docker.env with real credentials
# 3. For application settings (API keys, models), use root .env file
# 4. Always use DATABASE_URL (preferred over individual POSTGRES_* variables)
# 5. For production, set DEBUG=false and LOG_LEVEL=info
# 6. Use host.docker.internal to access host machine from Docker containers
# 7. SSL settings can be added to DATABASE_URL: ?sslmode=require&sslcert=path
# =============================================================================

